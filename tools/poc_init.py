#!/usr/bin/python3

import requests
from os import system,uname,getcwd,getuid,chdir
from sys import argv

def is_accept_exec(i_str):
    if i_str == "Y" or i_str == "y":
        return True
    elif i_str == "N" or i_str == "n":
        return False
    else:
        raise Exception("Invalid value for input")

def is_continue_exec(disp_str):
    val = None
    while True:
            try:
                val = is_accept_exec(input(disp_str))
            except Exception as exc:
                print("[-] %s" % exc.args[0])
                continue
            return val

def convertRepStrToInts(verStr):
    i = str()
    ints = []
    for e in verStr:
        if e == ".":
            ints.append(int(i,10))
            i = str()
        else:
            i+=e
    ints.append(int(i,10))
    return ints

kernel_archives_url = "http://cdn.kernel.org/pub/linux/kernel/v5.x/"
pattern_kern_archive = "linux-%s.tar.%s"

#def get_sign(ver):
#    global kernel_archives_url
#    global pattern_kern_archive
#    r = requsts.get(kernel_archives_url+pattern_kern_archive%(ver,"sign"))
#    signature = r.content
#    r.close()
#    return signature

#mutex = Lock()

def clear_line(len_line):
    cls_line = str()
    for i in range(len_line):
        cls_line+=" "
    return cls_line

i = 0

def animation(current_size):
    from time import sleep
    global i
    line = "[%ld bytes] download kernel archive xz" % (current_size)
    #print(line,end=clear_line(len(line))+"\r")
    print(line,end="\r")
    sleep(0.050)
    print(end=clear_line(len(line))+"\r")
    i+=1

def get_archive(ver,type_archive_str,src_dir):
    global kernel_archives_url
    global pattern_kern_archive
    with requests.get(kernel_archives_url+pattern_kern_archive%(ver,type_archive_str),stream=True) as response:
        archive = src_dir+pattern_kern_archive % (ver,type_archive_str)
        f = open(archive,"wb")
        print("[*] Create kernel archive file\n[+] start download kernel archive")
        print("[*] locate: %s" % archive)
        sizeOfArchive = 0
        for chunk in response.iter_content(8192):
            if chunk:
                f.write(chunk)
                sizeOfArchive += len(chunk)
                animation(sizeOfArchive)
            else:
                print("[+] saved kernel archive\n[*]kernel archive locate: %s" % archive)
                break
    f.close()
    print("[+] saved kernel archive")

#def get_kernel_files(ver,archive_type_str,src_dir):
#    get_archive(ver,archive_type_str,src_dir)
    


def is_xz(xz):
    from os import path
    return path.exists(xz) and path.isfile(xz)
def is_gz(gz):
    from os import path
    return path.exists(gz) and path.isfile(gz)

def find_linux_src_archive(ver,src_dir):
    global kernel_archives_url
    global pattern_kern_archive

    xz = src_dir+pattern_kern_archive%(ver,"xz")
    gz = src_dir+pattern_kern_archive%(ver,"gz")
    if (is_xz(xz) or is_gz(gz)) and not is_continue_exec("[*] found exists kernel archive file,download again?(Y/N)"):
        print("[*] skipped download kernel archive")
        if is_xz(xz):
            return "xz"
        elif is_gz(gz):
            return "gz"
        else:
            return "UNKNOWN"
    print("[*] find "+pattern_kern_archive % (ver,"*"),end="..\n")
    print("[*] get list of kernel archives..")
    r = requests.get(kernel_archives_url)
    content = r.content.decode()
    print("[+] Complete get list of kernel archives")
    kernel_xz_o = content.find(pattern_kern_archive % (ver,"xz"))
    kernel_gz_o = content.find(pattern_kern_archive % (ver,"gz"))
    r.close()

    if kernel_xz_o != -1:
        print("[*] download kernel archive xz..",end="\r")
        get_archive(ver,"xz",src_dir)
        return "xz"
    elif kernel_gz_o != -1:
        print("[*] download kernel archive gz..",end="\r")
        get_archive(ver,"gz",src_dir)
        return "gz"
    else:
        raise Exception("[-] Not found linux src\n[*] Try manually download kernel src or use exists")

#def verify_archive(kernel_files):

def download_current_src_net_hv(src_dir):
    global pattern_kern_archive
    if not is_continue_exec("[*] download compatible with current kernel version headers src hv_netvsc?(Y/N): "):
        print("[*]  skipped downloading complatible src hv_netvsc with current kernel version")
        return
    print("[*] get current kernel version..")
    kern_ver_full = uname().release
    kern_ver = kern_ver_full[:kern_ver_full.find("-")]
    ver_ints = convertRepStrToInts(kern_ver)
    ver = str()
    if ver_ints[2] == 0:
        ver = kern_ver[:kern_ver.rfind(".")]
    else:
        ver = kern_ver
    print("[+] current kernel version: %s" % ver)
    type_archive = str()
    try:
        type_archive = find_linux_src_archive(ver,src_dir)
    except requests.exceptions.ConnectionError:
        print("[-] Error connection: check internet connection")
        exit(-1)
    except Exception as exc:
        print(exc)
        return
    archive = src_dir+pattern_kern_archive % (ver,type_archive)
    if type_archive == "gz":
        if system("tar -xzf "+archive+" -C "+src_dir) != 0:
            print("[-] Error extract kernel archive")
            exit(-1)
    elif type_archive == "xz":
        if system("tar -xvf "+archive+" -C "+src_dir) != 0:
            print("[-] Error extract kernel archive")
            exit(-1)
    else:
        print("[-] BUG: unknown type archive")
        exit(-1)
    print("[+] Complete extract kernel archive")
    
    print("[*] copy hv src dir from archive kernel to src dir..")
    lin_dir = archive[:archive.find(".tar")]
    src_hv = lin_dir+"/drivers/net/hyperv/"
    retval = system("cp -r /%s/*.h /%s/*.c %s/" % (src_hv,src_hv,src_dir))
    if retval != 0:
        print("[-] Error copy %s to %s" % (src_hv,src_dir))
        return
    print("[+] Complete copy to %s" % src_dir)
    if is_continue_exec("[*] remove kernel archive file and extracted dir?(Y/N):"):
        if system("rm -rf %s/%s" % (src_dir,pattern_kern_archive[:pattern_kern_archive.find("-")+1]+"*")) != 0:
            print("[-] Cannot remove kernel archive and extracted dir")
        else:
            print("[+] Complete remove kernel archive and extracted dir")

def install_deps(cve_rdir):
    if not is_continue_exec("[*] install deps for poc_compile?(Y/N): "):
        print("[*] skipped installation deps for poc_compile")
        return
    system("python3 /%s/tools/poc_cfg_deps.py" % cve_rdir)

def commit_patch(cve_rdir):
    if not is_continue_exec("[*] Do you want commit patch for src *hv_netvsc* ?(Y/n):"):
        print("[*] skipped committing patch for src *hv_netvsc*")
        return
    current_path = getcwd()
    chdir(cve_rdir)
    system("cp -r nopatch_net_hyperv_src/*.h nopatch_net_hyperv_src/*.c src/")
    chdir("src/")
    system("patch < poc.patch")
    chdir(current_path)

def install_hv_guest_exts():
    cfg_bash_script = """
#!/bin/bash

#
# This script is for Ubuntu 18.04 Bionic Beaver to download and install XRDP+XORGXRDP via
# source.
#
# Major thanks to: http://c-nergy.be/blog/?p=11336 for the tips.
#

###############################################################################
# Use HWE kernel packages
#
HWE=""
#HWE="-hwe-18.04"

###############################################################################
# Update our machine to the latest code if we need to.
#

if [ "$(id -u)" -ne 0 ]; then
    echo 'This script must be run with root privileges' >&2
    exit 1
fi

apt update && apt upgrade -y

if [ -f /var/run/reboot-required ]; then
    echo "A reboot is required in order to proceed with the install." >&2
    echo "Please reboot and re-run this script to finish the install." >&2
    exit 1
fi

###############################################################################
# XRDP
#

# Install hv_kvp utils
apt install -y linux-tools-virtual${HWE}
apt install -y linux-cloud-tools-virtual${HWE}

# Install the xrdp service so we have the auto start behavior
apt install -y xrdp

systemctl stop xrdp
systemctl stop xrdp-sesman

# Configure the installed XRDP ini files.
# use vsock transport.
sed -i_orig -e 's/use_vsock=false/use_vsock=true/g' /etc/xrdp/xrdp.ini
# use rdp security.
sed -i_orig -e 's/security_layer=negotiate/security_layer=rdp/g' /etc/xrdp/xrdp.ini
# remove encryption validation.
sed -i_orig -e 's/crypt_level=high/crypt_level=none/g' /etc/xrdp/xrdp.ini
# disable bitmap compression since its local its much faster
sed -i_orig -e 's/bitmap_compression=true/bitmap_compression=false/g' /etc/xrdp/xrdp.ini

# Add script to setup the ubuntu session properly
if [ ! -e /etc/xrdp/startubuntu.sh ]; then
cat >> /etc/xrdp/startubuntu.sh << EOF
#!/bin/sh
export GNOME_SHELL_SESSION_MODE=ubuntu
export XDG_CURRENT_DESKTOP=ubuntu:GNOME
exec /etc/xrdp/startwm.sh
EOF
chmod a+x /etc/xrdp/startubuntu.sh
fi

# use the script to setup the ubuntu session
sed -i_orig -e 's/startwm/startubuntu/g' /etc/xrdp/sesman.ini

# rename the redirected drives to 'shared-drives'
sed -i -e 's/FuseMountName=thinclient_drives/FuseMountName=shared-drives/g' /etc/xrdp/sesman.ini

# Changed the allowed_users
sed -i_orig -e 's/allowed_users=console/allowed_users=anybody/g' /etc/X11/Xwrapper.config

# Blacklist the vmw module
if [ ! -e /etc/modprobe.d/blacklist_vmw_vsock_vmci_transport.conf ]; then
cat >> /etc/modprobe.d/blacklist_vmw_vsock_vmci_transport.conf <<EOF
blacklist vmw_vsock_vmci_transport
EOF
fi

#Ensure hv_sock gets loaded
if [ ! -e /etc/modules-load.d/hv_sock.conf ]; then
echo "hv_sock" > /etc/modules-load.d/hv_sock.conf
fi

# Configure the policy xrdp session
cat > /etc/polkit-1/localauthority/50-local.d/45-allow-colord.pkla <<EOF
[Allow Colord all Users]
Identity=unix-user:*
Action=org.freedesktop.color-manager.create-device;org.freedesktop.color-manager.create-profile;org.freedesktop.color-manager.delete-device;org.freedesktop.color-manager.delete-profile;org.freedesktop.color-manager.modify-device;org.freedesktop.color-manager.modify-profile
ResultAny=no
ResultInactive=no
ResultActive=yes
EOF

# reconfigure the service
systemctl daemon-reload
systemctl start xrdp

#
# End XRDP
###############################################################################

echo "Install is complete."
echo "Reboot your machine to begin using XRDP."
"""

    if not is_continue_exec("[*] Do you want  install hyper-v guest extensions for linux?(Y/N): "):
        print("[*] skipped installation hyper-v guests exts")
        return

    print("[*] create installer..")

    f = open("install.sh","w")
    f.write(cfg_bash_script)
    f.close()

    print("[+] Complete create installer")
    print("[*] saved installer\n[*]locate: /($pwd)/install.sh")
    system("chmod +x install.sh")

    if not is_continue_exec("[*] Do you want automate exec installer?(Y/n): "):
        print("[*] skipped exec installer")
        return

    print("[*] exec installer")
    system("./install.sh")
    print("[*] Complete exec installer\n[*]remove installer..")
    system("rm install.sh")
    print("[+] Complete remove installer")

def init(cve_rdir):
        install_hv_guest_exts()
        download_current_src_net_hv(cve_rdir+"/nopatch_net_hyperv_src/")
        commit_patch(cve_rdir)
        install_deps(cve_rdir)
        if not is_continue_exec("[*] Do you want reboot?(Y/n)"):
            print("[*] skipped reboot")
            print("[+] Complete init for used poc general tools")
        else:
            print("[+] Complete init for used poc general tools")
            print("[*] reboot..")
            sleep(2)
            system("reboot")
if __name__ == "__main__":
    if getuid() != 0:
        print("[*] Run Only UID==ROOT")
        exit(-1)
    if len(argv) != 2:
        print("[-] invalid arg\narg - PATH TO cve root dir")
        exit()
    init(argv[1])
